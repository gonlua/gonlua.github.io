<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://gonlua.github.io</id>
    <title>gonlua&apos;s blog</title>
    <updated>2021-01-28T07:41:56.570Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://gonlua.github.io"/>
    <link rel="self" href="https://gonlua.github.io/atom.xml"/>
    <subtitle>ゴンルアのブログ</subtitle>
    <logo>https://gonlua.github.io/images/avatar.png</logo>
    <icon>https://gonlua.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, gonlua&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[Tomcat应用取消部署时内存泄露问题]]></title>
        <id>https://gonlua.github.io/post/tomcat-ying-yong-qu-xiao-bu-shu-shi-nei-cun-xie-lu-wen-ti/</id>
        <link href="https://gonlua.github.io/post/tomcat-ying-yong-qu-xiao-bu-shu-shi-nei-cun-xie-lu-wen-ti/">
        </link>
        <updated>2020-12-18T01:46:26.000Z</updated>
        <content type="html"><![CDATA[<p>最近要升级到tomcat9，发现app undeploy时多了两个WARNING，而且通过在tomcat的管理页面的Find leaks功能检查时，发现应用还在那里。</p>
<pre><code class="language-shell">WARNING [http-nio-8080-exec-131] org.apache.catalina.loader.WebappClassLoaderBase.clearReferencesJdbc The web application [XXX] registered the JDBC driver [com.mysql.jdbc.Driver] but failed to unregister it when the web application was stopped. To prevent a memory leak, the JDBC Driver has been forcibly unregistered.
WARNING [http-nio-8080-exec-131] org.apache.catalina.loader.WebappClassLoaderBase.clearReferencesThreads The web application [XXX] appears to have started a thread named [MySQL Statement Cancellation Timer] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.lang.Object.wait(Native Method)
 java.lang.Object.wait(Object.java:502)
 java.util.TimerThread.mainLoop(Timer.java:526)
 java.util.TimerThread.run(Timer.java:505)

</code></pre>
<p>第一个是数据库驱动没有unregister, tomcat自动帮我们unregister了，如果想自己unregister，可以在web.xml里添加一个listener:</p>
<pre><code class="language-xml">&lt;listener&gt; 
	&lt;listener-class&gt;cn.gonlua.ExitCleaner&lt;/listener-class&gt; 
&lt;/listener&gt;
</code></pre>
<p>在contextDestoryed里手动卸载驱动</p>
<pre><code class="language-Java">public class ExitCleaner implements ServletContextListener {
	
	@Override
	public void contextDestroyed(ServletContextEvent arg0) {
		final Enumeration&lt;Driver&gt; drivers = DriverManager.getDrivers();
        Driver driver;
        while (drivers.hasMoreElements()) {
            driver = drivers.nextElement();
            try {
                DriverManager.deregisterDriver(driver);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
	}
    ......
}
</code></pre>
<p> <br>
第一个问题解决了，第二个问题中的MySQL Statement Cancellation Timer是什么呢？经过查阅，简单来说是MySQL用来检测超时的查询的，这个Timer在undeploy不会关闭，通过<code>jstack -l &lt;PID&gt;</code>命令查看线程信息也可以证实线程一直没关闭。就算setQueryTimeout(0); 也还是会创建Timer，奇怪了。网上查不到合适的信息，于是我查看了mysql-connector-java-5.1.16源码，发现Timer是在静态代码块里创建的，而且根本没有关闭Timer的地方，怪不得了。</p>
<pre><code class="language-Java">private static Timer cancelTimer;
......
static {
		......
		
		boolean createdNamedTimer = false;
		
		// Use reflection magic to try this on JDK's 1.5 and newer, fallback to non-named
		// timer on older VMs.
		try {
			Constructor ctr = Timer.class.getConstructor(new Class[] {String.class, Boolean.TYPE});
			
			cancelTimer = (Timer)ctr.newInstance(new Object[] { &quot;MySQL Statement Cancellation Timer&quot;, Boolean.TRUE});
			createdNamedTimer = true;
		} catch (Throwable t) {
			createdNamedTimer = false;
		}
		
		if (!createdNamedTimer) {
			cancelTimer = new Timer(true);
		}
        ......
}
</code></pre>
<p>于是我又查看了mysql-connector-java-5.1.49的源码，Timer是实例创建的，并且在关闭连接时有关闭Timer:</p>
<pre><code class="language-Java">private transient Timer cancelTimer;

......

public Timer getCancelTimer() {
    synchronized (getConnectionMutex()) {
        if (this.cancelTimer == null) {
            this.cancelTimer = new Timer(&quot;MySQL Statement Cancellation Timer&quot;, true);
        }
        return this.cancelTimer;
    }
}
......

public void realClose(boolean calledExplicitly, boolean issueRollback, boolean skipLocalTeardown, Throwable reason) throws SQLException {
    ......
    try {
        ......
    } finally {
        ......
        synchronized (getConnectionMutex()) {
            if (this.cancelTimer != null) {
                this.cancelTimer.cancel();
            }
        }

        this.isClosed = true;
    }
......
}
</code></pre>
<p> <br>
更新mysql驱动后，undeploy，Find leaks，发现还是没有完全undeploy(Timer线程还在)，但是再次点击Fink leaks后，就完全undeploy(Timer线程停止了)。<br>
应该是因为Find leaks会触发Full GC，所以是被回收了。<br>
如果setQueryTimeout(0); 也不会创建Timer了。但是undeploy后Find leaks还是有残留, Full GC后就没有了。<br>
通过对比Full GC前后的dump，发现undeploy后，webappClassLoader不会马上回收，Full GC后才会回收，应该是tomcat的机制。</p>
<p> <br>
第二个问题也算是解决了，但是tomcat log里又有一个新的WARNING：</p>
<pre><code class="language-shell">INFO [mysql-cj-abandoned-connection-cleanup] org.apache.catalina.loader.WebappClassLoaderBase.checkSt
ateForResourceLoading Illegal access: this web application instance has been stopped already. Could not load []. The following
 stack trace is thrown for debugging purposes as well as to attempt to terminate the thread which caused the illegal access.
        java.lang.IllegalStateException: Illegal access: this web application instance has been stopped already. Could not loa
d []. The following stack trace is thrown for debugging purposes as well as to attempt to terminate the thread which caused th
e illegal access.
    at org.apache.catalina.loader.WebappClassLoaderBase.checkStateForResourceLoading(WebappClassLoaderBase.java:13
85)
    at org.apache.catalina.loader.WebappClassLoaderBase.getResource(WebappClassLoaderBase.java:1038)
    at com.mysql.jdbc.AbandonedConnectionCleanupThread.checkThreadContextClassLoader(AbandonedConnectionCleanupThr
ead.java:112)
    at com.mysql.jdbc.AbandonedConnectionCleanupThread.run(AbandonedConnectionCleanupThread.java:79)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
    at java.lang.Thread.run(Thread.java:748)

</code></pre>
<p>也是在contextDestroyed里手动关闭就好了：</p>
<pre><code class="language-shell">AbandonedConnectionCleanupThread.checkedShutdown();
</code></pre>
<p> <br>
关于tomcat自动加载驱动，tomcat会在启动时扫描符合SPI的驱动来加载，新deploy的应用首次getConnection时也会自动加载驱动，但是会报错<code>java.sql.SQLException: No suitable driver found for jdbc:mysql</code>，然后重试，所以最好还是用class.forName自己先行加载。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[记一次JDBC连接极慢的问题]]></title>
        <id>https://gonlua.github.io/post/ji-yi-ci-jdbc-lian-jie-ji-man-de-wen-ti/</id>
        <link href="https://gonlua.github.io/post/ji-yi-ci-jdbc-lian-jie-ji-man-de-wen-ti/">
        </link>
        <updated>2020-12-16T08:30:17.000Z</updated>
        <content type="html"><![CDATA[<h3 id="背景">背景</h3>
<p>测试服务器上有两个tomcat，其中的一个tomat上的应用使用jdbc连接时都超慢。<br>
开始排除原因：</p>
<ol>
<li>数据库问题？连不同数据库也慢，排除。</li>
<li>服务器或网络问题？另外一个tomcat没问题，排除。<br>
 <br>
看来是这个tomcat里的问题，打印log，发现时间都花在了这一句上：</li>
</ol>
<pre><code class="language-Java">conn = java.sql.DriverManager.getConnection(url, userName, password);
</code></pre>
<p>查看源码，发现里面有打印日志，不过默认是不打印的，要传个Writer给它：</p>
<pre><code class="language-Java">java.sql.DriverManager.setLogWriter(new PrintWriter(System.out));
</code></pre>
<p> <br>
好家伙，不打不知道，一打吓一跳，日志刷的飞快，全是</p>
<pre><code>    skipping: java.sql.DriverInfo
    skipping: java.sql.DriverInfo
    skipping: java.sql.DriverInfo
    skipping: java.sql.DriverInfo
    skipping: java.sql.DriverInfo
    skipping: java.sql.DriverInfo
    skipping: java.sql.DriverInfo
    skipping: java.sql.DriverInfo
    skipping: java.sql.DriverInfo
    skipping: java.sql.DriverInfo
    skipping: java.sql.DriverInfo
    skipping: java.sql.DriverInfo
    skipping: java.sql.DriverInfo
    skipping: java.sql.DriverInfo
    skipping: java.sql.DriverInfo
    skipping: java.sql.DriverInfo
    skipping: java.sql.DriverInfo
</code></pre>
<p>查看DriverManager源码，关键代码如下：</p>
<pre><code class="language-java">// Walk through the loaded registeredDrivers attempting to locate someone
// who understands the given URL.
for (DriverInfo aDriver : registeredDrivers) {
    // If the caller does not have permission to load the driver then
    // skip it.
    if(isDriverAllowed(aDriver.driver, callerClass)) {
        try {
            if(aDriver.driver.acceptsURL(url)) {
                // Success!
                println(&quot;getDriver returning &quot; + aDriver.driver.getClass().getName());
                return (aDriver.driver);
            }

        } catch(SQLException sqe) {
            // Drop through and try the next driver.
        }
    } else {
        println(&quot;    skipping: &quot; + aDriver.driver.getClass().getName());
    }
}
</code></pre>
<p>原来是getConnection时，会查找registeredDrivers这个保存已注册的驱动的列表，没有权限的（不是这个ClassLoader）的就跳过。所以为什么registeredDrivers里会有这个多驱动？</p>
<p> <br>
dump tomat堆栈信息，用MemoryAnalyzer分析，发现registeredDrivers里有惊人的32万+items.<br>
<img src="https://gonlua.github.io/post-images/1608108722226.png" alt="" loading="lazy"></p>
<p>结合DriverManager的log，发现有另一个应用在一直注册DriverProxy类型的驱动：</p>
<pre><code>registerDriver: org.apache.commons.dbutils.DbUtils$DriverProxy@1143ad7f
DriverManager.getConnection(&quot;jdbc:oracle:thin:@10.10.XXX.XXX:XXX:XXX&quot;)
registerDriver: org.apache.commons.dbutils.DbUtils$DriverProxy@338314b
DriverManager.getConnection(&quot;jdbc:oracle:thin:@10.10.XXX.XXX:XXX:XXX&quot;)
registerDriver: org.apache.commons.dbutils.DbUtils$DriverProxy@5fc1fac0
DriverManager.getConnection(&quot;jdbc:oracle:thin:@10.10.XXX.XXX:XXX:XXX&quot;)
registerDriver: org.apache.commons.dbutils.DbUtils$DriverProxy@39ef9f3b
DriverManager.getConnection(&quot;jdbc:oracle:thin:@10.10.XXX.XXX:XXX:XXX&quot;)
</code></pre>
<p>虽然注册驱动时会判断是否存在，但只是判断是不是同一个对象，而这里每次都是一个新实例。<br>
那为什么另一个应用不断注册驱动，会影响到这个应用？<br>
因为tomcat上的所有应用的数据库驱动是由tomcat统一管理的，所有应用访问的都是同一个registeredDrivers列表。</p>
<p> <br>
根据以上线索终于找到了另一个应用中的问题代码：</p>
<pre><code class="language-Java">DbUtils.loadDriver(JDBC_DRIVER);
conn = DriverManager.getConnection(DB_URL, USER, PASSWORD);
</code></pre>
<p>进一步查看DbUtils.loadDriver里面，可以看到每次调用都是创建了一个新的驱动实例并注册。</p>
<pre><code class="language-Java">public static boolean loadDriver(ClassLoader classLoader, String driverClassName) {
    try {
        Class loadedClass = classLoader.loadClass(driverClassName);

        if (!(Driver.class.isAssignableFrom(loadedClass))) {
            return false;
        }

        Class driverClass = loadedClass;
        Constructor driverConstructor = driverClass.getConstructor(new Class[0]);

        boolean isConstructorAccessible = driverConstructor.isAccessible();
        if (!(isConstructorAccessible)) {
            driverConstructor.setAccessible(true);
        }
        try {
            Driver driver = (Driver) driverConstructor.newInstance(new Object[0]);
            DriverManager.registerDriver(new DriverProxy(driver));
        } finally {
            driverConstructor.setAccessible(isConstructorAccessible);
        }

        return true;
    } catch (RuntimeException e) {
        return false;
    } catch (Exception e) {
    }
    return false;
}
</code></pre>
<p> <br>
问题点是找到了，但是tomcat上有几十个应用，为什么其它的不会重复注册？<br>
查看其它应用的代码，不是用<code>DbUtils.loadDriver</code>, 而是<code>Class.forName</code>, 驱动内部的注册代码是在static{}里的，可以保证只注册一次：</p>
<pre><code class="language-Java">public class Driver extends NonRegisteringDriver implements java.sql.Driver {
	static {
		try {
			DriverManager.registerDriver(new Driver());
		} catch (SQLException E) {
			throw new RuntimeException(&quot;Can't register driver!&quot;);
		}
	}
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mybatis使用]]></title>
        <id>https://gonlua.github.io/post/mybatis-shi-yong/</id>
        <link href="https://gonlua.github.io/post/mybatis-shi-yong/">
        </link>
        <updated>2020-10-23T09:08:43.000Z</updated>
        <content type="html"><![CDATA[<h2 id="插入后返回自增id">插入后返回自增ID</h2>
<p>xml方式，添加属性<code>useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;</code><br>
注解方式，添加注解<code>@Options(useGeneratedKeys=true, keyProperty=&quot;userId&quot;, keyColumn=&quot;id&quot;)</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[RESTful API]]></title>
        <id>https://gonlua.github.io/post/restful-api/</id>
        <link href="https://gonlua.github.io/post/restful-api/">
        </link>
        <updated>2020-10-23T07:39:05.000Z</updated>
        <content type="html"><![CDATA[<p>REST全称是Representational State Transfer，中文意思是表述现性状态转移。<br>
指的是一组架构约束条件和原则，符合这套规则的架构，叫做RESTful架构。</p>
<ol>
<li>
<h3 id="资源与uri">资源与URI</h3>
<p>把所有东西看成是资源，每个资源在Web中的唯一标识是URI。<br>
设计URI的一些基本原则</p>
<ul>
<li>使用-来增加可读性</li>
<li>使用/表示层级关系</li>
<li>使用?来过滤资源</li>
<li>使用;表示同级资源</li>
<li>资源都是名词，不包含动词</li>
</ul>
</li>
<li>
<h3 id="资源的操作">资源的操作</h3>
<p>有以下几种</p>
<ul>
<li>HEAD</li>
<li>OPTIONS</li>
<li>GET （查询）</li>
<li>POST （新建）</li>
<li>PUT （全部更新）</li>
<li>PATCH （部分更新）</li>
<li>DELETE （删除）<br>
以上操作，除了POST和PATCH之外，都是幂等的（无论对资源操作多少次， 结果总是一样的）</li>
</ul>
</li>
<li>
<h3 id="操作的结果">操作的结果</h3>
<p>应该使用状态码表示：</p>
<ul>
<li>200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</li>
<li>201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。</li>
<li>202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）</li>
<li>204 NO CONTENT - [DELETE]：用户删除数据成功。</li>
<li>400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</li>
<li>401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</li>
<li>403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。</li>
<li>404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</li>
<li>406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</li>
<li>410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</li>
<li>422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。</li>
<li>500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。<br>
&amp;npbs;<br>
针对不同操作，服务器向用户返回的结果应该符合以下规范。</li>
<li>GET /collection：返回资源对象的列表（数组）</li>
<li>GET /collection/resource：返回单个资源对象</li>
<li>POST /collection：返回新生成的资源对象</li>
<li>PUT /collection/resource：返回完整的资源对象</li>
<li>PATCH /collection/resource：返回完整的资源对象</li>
<li>DELETE /collection/resource：返回一个空文档</li>
</ul>
</li>
</ol>
<p>参考链接：<a href="https://www.cnblogs.com/fishpro/p/spring-boot-study-restful.html">SpringBoot RESTful API 架构风格实践</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MySQL installer更改安装目录]]></title>
        <id>https://gonlua.github.io/post/mysql-installer-geng-gai-an-zhuang-mu-lu/</id>
        <link href="https://gonlua.github.io/post/mysql-installer-geng-gai-an-zhuang-mu-lu/">
        </link>
        <updated>2020-10-23T01:23:45.000Z</updated>
        <content type="html"><![CDATA[<p>用installer 1.4的时候，不能更改安装目录了，这里有个小技巧：<br>
在默认安装的目录建立一个空文件夹，比如我安装的是MySQL Server 5.6 64bit，<br>
就创建文件夹<br>
<code>C:\Program Files\MySQL\MySQL Server 5.6</code><br>
installer检查到冲突，就可以修改安装路径了：<br>
<img src="https://gonlua.github.io/post-images/1603416486735.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[错误 Property '$axios' does not exist on type 'CombinedVueInstance]]></title>
        <id>https://gonlua.github.io/post/cuo-wu-property-dollaraxios-does-not-exist-on-type-combinedvueinstance/</id>
        <link href="https://gonlua.github.io/post/cuo-wu-property-dollaraxios-does-not-exist-on-type-combinedvueinstance/">
        </link>
        <updated>2020-10-21T03:07:11.000Z</updated>
        <content type="html"><![CDATA[<p>如果用到了eslint，想要将$axios注入到Vue<br>
除了在main.ts加入</p>
<pre><code class="language-js">Vue.prototype.$axios = axios
</code></pre>
<p>之外<br>
 p<br>
还要在shims-tsx.d.ts里添加</p>
<pre><code class="language-js">import {AxiosInstance} from 'axios'

declare module 'vue/types/vue' {
  interface Vue {
      $axios: AxiosInstance;
  }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Jetson Nano安装easyocr]]></title>
        <id>https://gonlua.github.io/post/jetson-nano-an-zhuang-easyocr/</id>
        <link href="https://gonlua.github.io/post/jetson-nano-an-zhuang-easyocr/">
        </link>
        <updated>2020-10-16T07:13:02.000Z</updated>
        <content type="html"><![CDATA[<p>一开始我用easyocr whl包来安装，但是它自动安装依赖的时候，会有很多问题，所以要从源码安装，并且手动安装依赖包。<br>
 <br>
先说一下相关版本：</p>
<ul>
<li>JetPack 4.4</li>
<li>pytorch 1.6</li>
<li>torchvision 0.7</li>
<li>easyocr 1.1.10</li>
</ul>
<p> <br>
先提个醒，不要升级pip，一开始我以为是pip的版本(python3-pip 9.0.1)问题，所以升级到了(20.X)，不但没用，还搞得一团糟，把pip删了重装才行。<br>
 </p>
<ol>
<li>
<p>安装pytorch<br>
我是用 <a href="">https://github.com/dusty-nv/jetson-inference.git</a> 里的脚本来安装的。<br>
cmake之后，在build目录下会生成install-pytorch.sh，运行即可安装pytorch。<br>
但是这里有个坑，它中途会从国外网盘下载pytorch whl包，但是国内连不上，就一直卡在那里了。<br>
所以要先手动下载pytorch whl包，放在脚本同一目录里，并且修改脚本，把<br>
<code>download_wheel pip3 &quot;torch-1.6.0-cp36-cp36m-linux_aarch64.whl&quot; &quot;https://nvidia.box.com/shared/static/9eptse6jyly1ggt9axbja2yrmj6pbarc.whl&quot;</code><br>
这一行改为<br>
<code>pip3 install ./torch-1.6.0-cp36-cp36m-linux_aarch64.whl</code><br>
 <br>
脚本里还会安装torchvision和它的依赖包Pillow，但是这里又有一个坑，脚本里下载的Pillow是Pillow-7.2.0-cp36-cp36m-manylinux2014_aarch64.whl，结果安装不上，脚本一直卡在那里。单独安装时提示平台不支持，把mynylinux2014改为linux就可以安装了。</p>
</li>
<li>
<p>安装easyocr的其它依赖<br>
根据requirements.txt来一个个安装：</p>
<ul>
<li>torch (已安装)</li>
<li>torchvision&gt;=0.5 (已安装)</li>
<li>opencv-python (系统预装)</li>
<li>scipy</li>
<li>numpy (系统预装)</li>
<li>Pillow (已安装)</li>
<li>scikit-image</li>
<li>python-bidi</li>
</ul>
<p><strong>如果直接安装失败，就要手动安装它的依赖再安装它。</strong></p>
</li>
<li>
<p>把requirements.txt清空，从源码安装easyocr</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Windows10 日语输入法安装失败]]></title>
        <id>https://gonlua.github.io/post/windows10-ri-yu-shu-ru-fa-an-zhuang-shi-bai/</id>
        <link href="https://gonlua.github.io/post/windows10-ri-yu-shu-ru-fa-an-zhuang-shi-bai/">
        </link>
        <updated>2020-10-15T00:48:16.000Z</updated>
        <content type="html"><![CDATA[<p>最近公司的Windows10升级之后，安装Japanese IME (basic typing)时一直失败，<br>
提示</p>
<blockquote>
<p>sorry we're having trouble getting this feature installed 0x800f0954</p>
</blockquote>
<p>好像是因为WSUS缺少1809以上系统的语言包，可以通过以下方法设置，绕过域的WSUS服务器，直连微软服务器更新：</p>
<ol>
<li>
<p>打开注册表编辑器，定位到<code>HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU</code></p>
</li>
<li>
<p>将USEWUServer项目改为0</p>
</li>
<li>
<p>重启电脑</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[生成Heap Dump文件]]></title>
        <id>https://gonlua.github.io/post/sheng-cheng-heap-dump-wen-jian/</id>
        <link href="https://gonlua.github.io/post/sheng-cheng-heap-dump-wen-jian/">
        </link>
        <updated>2020-09-30T03:19:52.000Z</updated>
        <content type="html"><![CDATA[<h1 id="使用jmap命令生成">使用jmap命令生成</h1>
<p><code>jmap -dump:live,format=b,file=/tmp/heap.hprof &lt;pid&gt;</code>  //不加live,可以不触发Full GC</p>
<h1 id="使用jvm参数自动生成">使用JVM参数自动生成</h1>
<ol>
<li>当发生OutOfMemoryError时生成<br>
<code>-XX:+HeapDumpOnOutOfMemoryError</code></li>
<li>在执行FullGC前生成<br>
<code>-XX:+HeapDumpBeforeFullGC</code></li>
<li>在执行FullGC后生成<br>
<code>-XX:+HeapDumpAfterFullGC</code></li>
<li>指定文件存放路径<br>
<code>-XX:HeapDumpPath=/tmp/heap.hprof</code></li>
</ol>
<p>之后就可以用Eclipse Memory Analyzer(MAT)打开来分析了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SheetJS (JS-XLSX)的使用]]></title>
        <id>https://gonlua.github.io/post/sheetjs-js-xlsxde-shi-yong/</id>
        <link href="https://gonlua.github.io/post/sheetjs-js-xlsxde-shi-yong/">
        </link>
        <updated>2020-09-29T08:54:10.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>引入xlsx.full.min.js, 如果要兼容ES5的浏览器，还要先引入shim.min.js<pre><code class="language-html">&lt;script type=&quot;text/javascript&quot; src=&quot;shim.min.js&quot;&gt;&lt;/script&gt;
 &lt;script type=&quot;text/javascript&quot; src=&quot;xlsx.full.min.js&quot;&gt;&lt;/script&gt;
</code></pre>
</li>
</ol>
<p> </p>
<ol start="2">
<li>创建Workbook
<ul>
<li>从零创建</li>
</ul>
<pre><code class="language-JS">var wb = {SheetNames:['Sheet1'], Sheets:{}, Props:{}};
</code></pre>
<ul>
<li>读取现有的spreadsheet (ajax方式)</li>
</ul>
<pre><code class="language-JS">var url = &quot;http://oss.sheetjs.com/test_files/formula_stress_test.xlsx&quot;;

/* set up async GET request */
var req = new XMLHttpRequest();
req.open(&quot;GET&quot;, url, true);
req.responseType = &quot;arraybuffer&quot;;

req.onload = function(e) {
var data = new Uint8Array(req.response);
var workbook = XLSX.read(data, {type:&quot;array&quot;});

/* DO SOMETHING WITH workbook HERE */
}

req.send();
</code></pre>
</li>
</ol>
<p> </p>
<ol start="3">
<li>获取/创建/修改Worksheet
<ul>
<li>从Workbook中获取</li>
</ul>
<pre><code class="language-JS">var ws = workbook.Sheets[workbook.SheetNames[0]]; //获取第一个Worksheet
</code></pre>
<ul>
<li>利用二维数组创建</li>
</ul>
<pre><code class="language-JS">// 中间空的单元格要设为空值，后面的可以省略
var ws = XLSX.utils.aoa_to_sheet([
    [1,2,3,4,5,6,7],
    [1,2,3,4,null,6,7],
    [1,2,3,4,5]
]);
</code></pre>
<ul>
<li>二维数组添加到现有的Worksheet中</li>
</ul>
<pre><code class="language-JS">XLSX.utils.sheet_add_aoa(ws, array, {origin: 'A3'});  //指定坐标为A3
</code></pre>
</li>
</ol>
<p> </p>
<ol start="4">
<li>合并单元格
<ul>
<li>首先要说明一下在SheetJS里的单元格是表示方式<br>
SheetJS里以<code>{c:C, r:R}</code>的对象表示一个单元格，c是Column，r是Row, C和R是列和行的坐标(从0开始算)，因此单元格B5，在SheetJS里表示为<code>{c:1, r:4}</code><br>
SheetJS里以<code>{s:S, e:E}</code>的对象表示一个范围，s是Start, e是End, S和E是开始和结束的单元格，因此B5~C5这个范围表示为<code>{s:{c:1, r:4}, e:{c:2, r:4}}</code></li>
<li>然后就可以进行单元格合并<br>
在Worksheet里有个<code>!merges</code>属性，用来存放单元格的合并信息，是一个“范围”对象的数组<br>
所以刚刚的B5~C5合并要写成<code>ws['!merges'] = [{s:{c:1, r:4}, e:{c:2, r:4}}]</code></li>
</ul>
</li>
</ol>
<p> </p>
<ol start="5">
<li>将Worksheet添加到Workbook<pre><code class="language-JS"> wb.Sheets['Sheet1'] = ws;
</code></pre>
</li>
</ol>
<p> </p>
<ol start="5">
<li>Workbook导出
<ul>
<li>方法会自动判断导出的格式(ods里面只能有一个Worksheet，不然会报错，不知道为什么)，浏览器环境会自动下载</li>
</ul>
<pre><code class="language-JS">XLSX.writeFile(wb, 'out.ods');
</code></pre>
</li>
</ol>
]]></content>
    </entry>
</feed>